package ${package};

${imports}
import com.paladin.common.core.export.ExportUtil;
import com.paladin.common.core.ControllerSupport;
import com.paladin.framework.api.R;
import com.paladin.framework.excel.write.ExcelWriteException;
import com.paladin.framework.service.PageResult;
import com.paladin.framework.service.annotation.QueryInputMethod;
import com.paladin.framework.service.annotation.QueryOutputMethod;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.io.IOException;

@Controller
@RequestMapping("${baseRequestMapping}")
public class ${upperModelName}Controller extends ControllerSupport {

    @Autowired
    private ${upperModelName}Service ${lowerModelName}Service;

    @GetMapping("${indexRM}")
    @QueryInputMethod(queryClass = ${upperModelName}Query.class)
    public String index() {
        return "${indexPage}";
    }

    @PostMapping(value = "${findPageRM}")
    @ResponseBody
    @QueryOutputMethod(queryClass = ${upperModelName}Query.class, paramIndex = 0)
    public PageResult<${upperModelName}> findPage(${upperModelName}Query query) {
        return ${lowerModelName}Service.findPage(query);
    }
    
    @GetMapping("${getDetailRM}")
    @ResponseBody
    public ${upperModelName} getDetail(@RequestParam String id) {
        return ${lowerModelName}Service.get(id);
    }
    
    @GetMapping("${addRM}")
    public String addInput() {
        return "${addPage}";
    }

    @GetMapping("${detailRM}")
    public String detailInput(@RequestParam String id, Model model) {
    	model.addAttribute("id", id);
        return "${detailPage}";
    }

    @GetMapping("${editRM}")
    public String editInput(@RequestParam String id, Model model) {
        model.addAttribute("id", id);
        return "${editPage}";
    }
    
    @PostMapping("${saveRM}")
	@ResponseBody
    public R save(@Valid ${upperModelName}DTO ${lowerModelName}DTO, BindingResult bindingResult) {
	    // 验证数据
	    validErrorHandler(bindingResult);
		${lowerModelName}Service.save(beanCopy(${lowerModelName}DTO, new ${upperModelName}()));
		return R.success();
	}

    @PostMapping("${updateRM}")
	@ResponseBody
    public R update(@Valid ${upperModelName}DTO ${lowerModelName}DTO, BindingResult bindingResult) {
        // 验证数据
		validErrorHandler(bindingResult);
		String id = ${lowerModelName}DTO.getId();
		${upperModelName} model = beanCopy(${lowerModelName}DTO, ${lowerModelName}Service.getWhole(id));
		${lowerModelName}Service.updateWhole(model);
        return R.success();
	}

    @PostMapping(value = "${deleteRM}")
    @ResponseBody
    public R delete(@RequestParam String id) {
        ${lowerModelName}Service.deleteById(id);
        return R.success();
    }
    
    @PostMapping(value = "${exportRM}")
	@ResponseBody
	public String export(@RequestBody ${upperModelName}ExportCondition condition) {
		if (condition == null) {
            throw new BusinessException("导出失败：请求参数异常");
		}
		condition.sortCellIndex();
		${upperModelName}Query query = condition.getQuery();
		try {
			if (query != null) {
				if (condition.isExportAll()) {
					return ExportUtil.export(condition, ${lowerModelName}Service.findList(query), ${upperModelName}.class);
				} else if (condition.isExportPage()) {
					return ExportUtil.export(condition, ${lowerModelName}Service.findPage(query).getData(), ${upperModelName}.class);
				}
			}
            throw new BusinessException("导出数据失败：请求参数错误");
		} catch (IOException | ExcelWriteException e) {
            throw new BusinessException("导出数据失败", e);
		}
	}
}